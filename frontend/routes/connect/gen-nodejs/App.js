//
// Autogenerated by Thrift Compiler (0.9.3)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;


var ttypes = require('./app_types');
//HELPER FUNCTIONS AND STRUCTURES

App_get_suggestions_args = function(args) {
};
App_get_suggestions_args.prototype = {};
App_get_suggestions_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

App_get_suggestions_args.prototype.write = function(output) {
  output.writeStructBegin('App_get_suggestions_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

App_get_suggestions_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.Suggestion]);
    }
  }
};
App_get_suggestions_result.prototype = {};
App_get_suggestions_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size10 = 0;
        var _rtmp314;
        this.success = [];
        var _etype13 = 0;
        _rtmp314 = input.readListBegin();
        _etype13 = _rtmp314.etype;
        _size10 = _rtmp314.size;
        for (var _i15 = 0; _i15 < _size10; ++_i15)
        {
          var elem16 = null;
          elem16 = new ttypes.Suggestion();
          elem16.read(input);
          this.success.push(elem16);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

App_get_suggestions_result.prototype.write = function(output) {
  output.writeStructBegin('App_get_suggestions_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter17 in this.success)
    {
      if (this.success.hasOwnProperty(iter17))
      {
        iter17 = this.success[iter17];
        iter17.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

App_get_attributes_args = function(args) {
};
App_get_attributes_args.prototype = {};
App_get_attributes_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

App_get_attributes_args.prototype.write = function(output) {
  output.writeStructBegin('App_get_attributes_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

App_get_attributes_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.Attribute]);
    }
  }
};
App_get_attributes_result.prototype = {};
App_get_attributes_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size18 = 0;
        var _rtmp322;
        this.success = [];
        var _etype21 = 0;
        _rtmp322 = input.readListBegin();
        _etype21 = _rtmp322.etype;
        _size18 = _rtmp322.size;
        for (var _i23 = 0; _i23 < _size18; ++_i23)
        {
          var elem24 = null;
          elem24 = new ttypes.Attribute();
          elem24.read(input);
          this.success.push(elem24);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

App_get_attributes_result.prototype.write = function(output) {
  output.writeStructBegin('App_get_attributes_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter25 in this.success)
    {
      if (this.success.hasOwnProperty(iter25))
      {
        iter25 = this.success[iter25];
        iter25.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

App_init_run_args = function(args) {
};
App_init_run_args.prototype = {};
App_init_run_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

App_init_run_args.prototype.write = function(output) {
  output.writeStructBegin('App_init_run_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

App_init_run_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
  }
};
App_init_run_result.prototype = {};
App_init_run_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size26 = 0;
        var _rtmp330;
        this.success = [];
        var _etype29 = 0;
        _rtmp330 = input.readListBegin();
        _etype29 = _rtmp330.etype;
        _size26 = _rtmp330.size;
        for (var _i31 = 0; _i31 < _size26; ++_i31)
        {
          var elem32 = null;
          elem32 = input.readString();
          this.success.push(elem32);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

App_init_run_result.prototype.write = function(output) {
  output.writeStructBegin('App_init_run_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter33 in this.success)
    {
      if (this.success.hasOwnProperty(iter33))
      {
        iter33 = this.success[iter33];
        output.writeString(iter33);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

App_ping_args = function(args) {
};
App_ping_args.prototype = {};
App_ping_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

App_ping_args.prototype.write = function(output) {
  output.writeStructBegin('App_ping_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

App_ping_result = function(args) {
};
App_ping_result.prototype = {};
App_ping_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

App_ping_result.prototype.write = function(output) {
  output.writeStructBegin('App_ping_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

App_test1_args = function(args) {
};
App_test1_args.prototype = {};
App_test1_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

App_test1_args.prototype.write = function(output) {
  output.writeStructBegin('App_test1_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

App_test1_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
App_test1_result.prototype = {};
App_test1_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

App_test1_result.prototype.write = function(output) {
  output.writeStructBegin('App_test1_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

App_test2_args = function(args) {
};
App_test2_args.prototype = {};
App_test2_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

App_test2_args.prototype.write = function(output) {
  output.writeStructBegin('App_test2_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

App_test2_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.Suggestion(args.success);
    }
  }
};
App_test2_result.prototype = {};
App_test2_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.Suggestion();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

App_test2_result.prototype.write = function(output) {
  output.writeStructBegin('App_test2_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AppClient = exports.Client = function(output, pClass) {
    this.output = output;
    this.pClass = pClass;
    this._seqid = 0;
    this._reqs = {};
};
AppClient.prototype = {};
AppClient.prototype.seqid = function() { return this._seqid; }
AppClient.prototype.new_seqid = function() { return this._seqid += 1; }
AppClient.prototype.get_suggestions = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_suggestions();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_suggestions();
  }
};

AppClient.prototype.send_get_suggestions = function() {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_suggestions', Thrift.MessageType.CALL, this.seqid());
  var args = new App_get_suggestions_args();
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

AppClient.prototype.recv_get_suggestions = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new App_get_suggestions_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_suggestions failed: unknown result');
};
AppClient.prototype.get_attributes = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_attributes();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_attributes();
  }
};

AppClient.prototype.send_get_attributes = function() {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_attributes', Thrift.MessageType.CALL, this.seqid());
  var args = new App_get_attributes_args();
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

AppClient.prototype.recv_get_attributes = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new App_get_attributes_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_attributes failed: unknown result');
};
AppClient.prototype.init_run = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_init_run();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_init_run();
  }
};

AppClient.prototype.send_init_run = function() {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('init_run', Thrift.MessageType.CALL, this.seqid());
  var args = new App_init_run_args();
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

AppClient.prototype.recv_init_run = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new App_init_run_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('init_run failed: unknown result');
};
AppClient.prototype.ping = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_ping();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_ping();
  }
};

AppClient.prototype.send_ping = function() {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('ping', Thrift.MessageType.CALL, this.seqid());
  var args = new App_ping_args();
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

AppClient.prototype.recv_ping = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new App_ping_result();
  result.read(input);
  input.readMessageEnd();

  callback(null)
};
AppClient.prototype.test1 = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_test1();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_test1();
  }
};

AppClient.prototype.send_test1 = function() {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('test1', Thrift.MessageType.CALL, this.seqid());
  var args = new App_test1_args();
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

AppClient.prototype.recv_test1 = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new App_test1_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('test1 failed: unknown result');
};
AppClient.prototype.test2 = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_test2();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_test2();
  }
};

AppClient.prototype.send_test2 = function() {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('test2', Thrift.MessageType.CALL, this.seqid());
  var args = new App_test2_args();
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

AppClient.prototype.recv_test2 = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new App_test2_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('test2 failed: unknown result');
};
AppProcessor = exports.Processor = function(handler) {
  this._handler = handler
}
AppProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
}

AppProcessor.prototype.process_get_suggestions = function(seqid, input, output) {
  var args = new App_get_suggestions_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_suggestions.length === 0) {
    Q.fcall(this._handler.get_suggestions)
      .then(function(result) {
        var result = new App_get_suggestions_result({success: result});
        output.writeMessageBegin("get_suggestions", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_suggestions", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.get_suggestions(function (err, result) {
      if (err == null) {
        var result = new App_get_suggestions_result((err != null ? err : {success: result}));
        output.writeMessageBegin("get_suggestions", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_suggestions", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

AppProcessor.prototype.process_get_attributes = function(seqid, input, output) {
  var args = new App_get_attributes_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_attributes.length === 0) {
    Q.fcall(this._handler.get_attributes)
      .then(function(result) {
        var result = new App_get_attributes_result({success: result});
        output.writeMessageBegin("get_attributes", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_attributes", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.get_attributes(function (err, result) {
      if (err == null) {
        var result = new App_get_attributes_result((err != null ? err : {success: result}));
        output.writeMessageBegin("get_attributes", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_attributes", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

AppProcessor.prototype.process_init_run = function(seqid, input, output) {
  var args = new App_init_run_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.init_run.length === 0) {
    Q.fcall(this._handler.init_run)
      .then(function(result) {
        var result = new App_init_run_result({success: result});
        output.writeMessageBegin("init_run", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("init_run", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.init_run(function (err, result) {
      if (err == null) {
        var result = new App_init_run_result((err != null ? err : {success: result}));
        output.writeMessageBegin("init_run", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("init_run", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

AppProcessor.prototype.process_ping = function(seqid, input, output) {
  var args = new App_ping_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.ping.length === 0) {
    Q.fcall(this._handler.ping)
      .then(function(result) {
        var result = new App_ping_result({success: result});
        output.writeMessageBegin("ping", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("ping", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.ping(function (err, result) {
      if (err == null) {
        var result = new App_ping_result((err != null ? err : {success: result}));
        output.writeMessageBegin("ping", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("ping", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

AppProcessor.prototype.process_test1 = function(seqid, input, output) {
  var args = new App_test1_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.test1.length === 0) {
    Q.fcall(this._handler.test1)
      .then(function(result) {
        var result = new App_test1_result({success: result});
        output.writeMessageBegin("test1", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("test1", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.test1(function (err, result) {
      if (err == null) {
        var result = new App_test1_result((err != null ? err : {success: result}));
        output.writeMessageBegin("test1", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("test1", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

AppProcessor.prototype.process_test2 = function(seqid, input, output) {
  var args = new App_test2_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.test2.length === 0) {
    Q.fcall(this._handler.test2)
      .then(function(result) {
        var result = new App_test2_result({success: result});
        output.writeMessageBegin("test2", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("test2", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.test2(function (err, result) {
      if (err == null) {
        var result = new App_test2_result((err != null ? err : {success: result}));
        output.writeMessageBegin("test2", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("test2", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

