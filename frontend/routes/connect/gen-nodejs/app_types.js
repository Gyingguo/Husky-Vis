//
// Autogenerated by Thrift Compiler (0.9.3)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;


var ttypes = module.exports = {};
Suggestion = module.exports.Suggestion = function(args) {
  this.measure = null;
  this.dimension = null;
  this.chart_type = null;
  this.aggregate_type = null;
  this.statistical_method = null;
  this.aggregate_data = null;
  this.score = null;
  if (args) {
    if (args.measure !== undefined && args.measure !== null) {
      this.measure = args.measure;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field measure is unset!');
    }
    if (args.dimension !== undefined && args.dimension !== null) {
      this.dimension = args.dimension;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field dimension is unset!');
    }
    if (args.chart_type !== undefined && args.chart_type !== null) {
      this.chart_type = args.chart_type;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field chart_type is unset!');
    }
    if (args.aggregate_type !== undefined && args.aggregate_type !== null) {
      this.aggregate_type = args.aggregate_type;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field aggregate_type is unset!');
    }
    if (args.statistical_method !== undefined && args.statistical_method !== null) {
      this.statistical_method = args.statistical_method;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field statistical_method is unset!');
    }
    if (args.aggregate_data !== undefined && args.aggregate_data !== null) {
      this.aggregate_data = Thrift.copyMap(args.aggregate_data, [null]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field aggregate_data is unset!');
    }
    if (args.score !== undefined && args.score !== null) {
      this.score = args.score;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field score is unset!');
    }
  }
};
Suggestion.prototype = {};
Suggestion.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.measure = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.dimension = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.chart_type = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.aggregate_type = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.statistical_method = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.MAP) {
        var _size0 = 0;
        var _rtmp34;
        this.aggregate_data = {};
        var _ktype1 = 0;
        var _vtype2 = 0;
        _rtmp34 = input.readMapBegin();
        _ktype1 = _rtmp34.ktype;
        _vtype2 = _rtmp34.vtype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var key6 = null;
          var val7 = null;
          key6 = input.readString();
          val7 = input.readDouble();
          this.aggregate_data[key6] = val7;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.DOUBLE) {
        this.score = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Suggestion.prototype.write = function(output) {
  output.writeStructBegin('Suggestion');
  if (this.measure !== null && this.measure !== undefined) {
    output.writeFieldBegin('measure', Thrift.Type.STRING, 1);
    output.writeString(this.measure);
    output.writeFieldEnd();
  }
  if (this.dimension !== null && this.dimension !== undefined) {
    output.writeFieldBegin('dimension', Thrift.Type.STRING, 2);
    output.writeString(this.dimension);
    output.writeFieldEnd();
  }
  if (this.chart_type !== null && this.chart_type !== undefined) {
    output.writeFieldBegin('chart_type', Thrift.Type.STRING, 3);
    output.writeString(this.chart_type);
    output.writeFieldEnd();
  }
  if (this.aggregate_type !== null && this.aggregate_type !== undefined) {
    output.writeFieldBegin('aggregate_type', Thrift.Type.STRING, 4);
    output.writeString(this.aggregate_type);
    output.writeFieldEnd();
  }
  if (this.statistical_method !== null && this.statistical_method !== undefined) {
    output.writeFieldBegin('statistical_method', Thrift.Type.STRING, 5);
    output.writeString(this.statistical_method);
    output.writeFieldEnd();
  }
  if (this.aggregate_data !== null && this.aggregate_data !== undefined) {
    output.writeFieldBegin('aggregate_data', Thrift.Type.MAP, 6);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.DOUBLE, Thrift.objectLength(this.aggregate_data));
    for (var kiter8 in this.aggregate_data)
    {
      if (this.aggregate_data.hasOwnProperty(kiter8))
      {
        var viter9 = this.aggregate_data[kiter8];
        output.writeString(kiter8);
        output.writeDouble(viter9);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.score !== null && this.score !== undefined) {
    output.writeFieldBegin('score', Thrift.Type.DOUBLE, 7);
    output.writeDouble(this.score);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Attribute = module.exports.Attribute = function(args) {
  this.attribute = null;
  if (args) {
    if (args.attribute !== undefined && args.attribute !== null) {
      this.attribute = args.attribute;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field attribute is unset!');
    }
  }
};
Attribute.prototype = {};
Attribute.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.attribute = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Attribute.prototype.write = function(output) {
  output.writeStructBegin('Attribute');
  if (this.attribute !== null && this.attribute !== undefined) {
    output.writeFieldBegin('attribute', Thrift.Type.STRING, 1);
    output.writeString(this.attribute);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

