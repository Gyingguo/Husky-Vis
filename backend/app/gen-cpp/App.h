/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef App_H
#define App_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "app_types.h"

namespace Server {

#ifdef _WIN32
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class AppIf {
 public:
  virtual ~AppIf() {}
  virtual void get_suggestions(std::vector<Suggestion> & _return) = 0;
  virtual void get_attributes(std::vector<Attribute> & _return) = 0;
};

class AppIfFactory {
 public:
  typedef AppIf Handler;

  virtual ~AppIfFactory() {}

  virtual AppIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(AppIf* /* handler */) = 0;
};

class AppIfSingletonFactory : virtual public AppIfFactory {
 public:
  AppIfSingletonFactory(const boost::shared_ptr<AppIf>& iface) : iface_(iface) {}
  virtual ~AppIfSingletonFactory() {}

  virtual AppIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(AppIf* /* handler */) {}

 protected:
  boost::shared_ptr<AppIf> iface_;
};

class AppNull : virtual public AppIf {
 public:
  virtual ~AppNull() {}
  void get_suggestions(std::vector<Suggestion> & /* _return */) {
    return;
  }
  void get_attributes(std::vector<Attribute> & /* _return */) {
    return;
  }
};


class App_get_suggestions_args {
 public:

  App_get_suggestions_args(const App_get_suggestions_args&);
  App_get_suggestions_args& operator=(const App_get_suggestions_args&);
  App_get_suggestions_args() {
  }

  virtual ~App_get_suggestions_args() throw();

  bool operator == (const App_get_suggestions_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const App_get_suggestions_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const App_get_suggestions_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class App_get_suggestions_pargs {
 public:


  virtual ~App_get_suggestions_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _App_get_suggestions_result__isset {
  _App_get_suggestions_result__isset() : success(false) {}
  bool success :1;
} _App_get_suggestions_result__isset;

class App_get_suggestions_result {
 public:

  App_get_suggestions_result(const App_get_suggestions_result&);
  App_get_suggestions_result& operator=(const App_get_suggestions_result&);
  App_get_suggestions_result() {
  }

  virtual ~App_get_suggestions_result() throw();
  std::vector<Suggestion>  success;

  _App_get_suggestions_result__isset __isset;

  void __set_success(const std::vector<Suggestion> & val);

  bool operator == (const App_get_suggestions_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const App_get_suggestions_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const App_get_suggestions_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _App_get_suggestions_presult__isset {
  _App_get_suggestions_presult__isset() : success(false) {}
  bool success :1;
} _App_get_suggestions_presult__isset;

class App_get_suggestions_presult {
 public:


  virtual ~App_get_suggestions_presult() throw();
  std::vector<Suggestion> * success;

  _App_get_suggestions_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class App_get_attributes_args {
 public:

  App_get_attributes_args(const App_get_attributes_args&);
  App_get_attributes_args& operator=(const App_get_attributes_args&);
  App_get_attributes_args() {
  }

  virtual ~App_get_attributes_args() throw();

  bool operator == (const App_get_attributes_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const App_get_attributes_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const App_get_attributes_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class App_get_attributes_pargs {
 public:


  virtual ~App_get_attributes_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _App_get_attributes_result__isset {
  _App_get_attributes_result__isset() : success(false) {}
  bool success :1;
} _App_get_attributes_result__isset;

class App_get_attributes_result {
 public:

  App_get_attributes_result(const App_get_attributes_result&);
  App_get_attributes_result& operator=(const App_get_attributes_result&);
  App_get_attributes_result() {
  }

  virtual ~App_get_attributes_result() throw();
  std::vector<Attribute>  success;

  _App_get_attributes_result__isset __isset;

  void __set_success(const std::vector<Attribute> & val);

  bool operator == (const App_get_attributes_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const App_get_attributes_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const App_get_attributes_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _App_get_attributes_presult__isset {
  _App_get_attributes_presult__isset() : success(false) {}
  bool success :1;
} _App_get_attributes_presult__isset;

class App_get_attributes_presult {
 public:


  virtual ~App_get_attributes_presult() throw();
  std::vector<Attribute> * success;

  _App_get_attributes_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class AppClient : virtual public AppIf {
 public:
  AppClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  AppClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void get_suggestions(std::vector<Suggestion> & _return);
  void send_get_suggestions();
  void recv_get_suggestions(std::vector<Suggestion> & _return);
  void get_attributes(std::vector<Attribute> & _return);
  void send_get_attributes();
  void recv_get_attributes(std::vector<Attribute> & _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class AppProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<AppIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (AppProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_get_suggestions(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_attributes(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  AppProcessor(boost::shared_ptr<AppIf> iface) :
    iface_(iface) {
    processMap_["get_suggestions"] = &AppProcessor::process_get_suggestions;
    processMap_["get_attributes"] = &AppProcessor::process_get_attributes;
  }

  virtual ~AppProcessor() {}
};

class AppProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  AppProcessorFactory(const ::boost::shared_ptr< AppIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< AppIfFactory > handlerFactory_;
};

class AppMultiface : virtual public AppIf {
 public:
  AppMultiface(std::vector<boost::shared_ptr<AppIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~AppMultiface() {}
 protected:
  std::vector<boost::shared_ptr<AppIf> > ifaces_;
  AppMultiface() {}
  void add(boost::shared_ptr<AppIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void get_suggestions(std::vector<Suggestion> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_suggestions(_return);
    }
    ifaces_[i]->get_suggestions(_return);
    return;
  }

  void get_attributes(std::vector<Attribute> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_attributes(_return);
    }
    ifaces_[i]->get_attributes(_return);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class AppConcurrentClient : virtual public AppIf {
 public:
  AppConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  AppConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void get_suggestions(std::vector<Suggestion> & _return);
  int32_t send_get_suggestions();
  void recv_get_suggestions(std::vector<Suggestion> & _return, const int32_t seqid);
  void get_attributes(std::vector<Attribute> & _return);
  int32_t send_get_attributes();
  void recv_get_attributes(std::vector<Attribute> & _return, const int32_t seqid);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _WIN32
  #pragma warning( pop )
#endif

} // namespace

#endif
