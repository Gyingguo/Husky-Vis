/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef App_H
#define App_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "app_types.h"

namespace Visualization {

#ifdef _WIN32
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class AppIf {
 public:
  virtual ~AppIf() {}
  virtual int32_t ping() = 0;
  virtual void init_run(std::vector<std::string> & _return) = 0;
};

class AppIfFactory {
 public:
  typedef AppIf Handler;

  virtual ~AppIfFactory() {}

  virtual AppIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(AppIf* /* handler */) = 0;
};

class AppIfSingletonFactory : virtual public AppIfFactory {
 public:
  AppIfSingletonFactory(const boost::shared_ptr<AppIf>& iface) : iface_(iface) {}
  virtual ~AppIfSingletonFactory() {}

  virtual AppIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(AppIf* /* handler */) {}

 protected:
  boost::shared_ptr<AppIf> iface_;
};

class AppNull : virtual public AppIf {
 public:
  virtual ~AppNull() {}
  int32_t ping() {
    int32_t _return = 0;
    return _return;
  }
  void init_run(std::vector<std::string> & /* _return */) {
    return;
  }
};


class App_ping_args {
 public:

  App_ping_args(const App_ping_args&);
  App_ping_args& operator=(const App_ping_args&);
  App_ping_args() {
  }

  virtual ~App_ping_args() throw();

  bool operator == (const App_ping_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const App_ping_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const App_ping_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class App_ping_pargs {
 public:


  virtual ~App_ping_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _App_ping_result__isset {
  _App_ping_result__isset() : success(false) {}
  bool success :1;
} _App_ping_result__isset;

class App_ping_result {
 public:

  App_ping_result(const App_ping_result&);
  App_ping_result& operator=(const App_ping_result&);
  App_ping_result() : success(0) {
  }

  virtual ~App_ping_result() throw();
  int32_t success;

  _App_ping_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const App_ping_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const App_ping_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const App_ping_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _App_ping_presult__isset {
  _App_ping_presult__isset() : success(false) {}
  bool success :1;
} _App_ping_presult__isset;

class App_ping_presult {
 public:


  virtual ~App_ping_presult() throw();
  int32_t* success;

  _App_ping_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class App_init_run_args {
 public:

  App_init_run_args(const App_init_run_args&);
  App_init_run_args& operator=(const App_init_run_args&);
  App_init_run_args() {
  }

  virtual ~App_init_run_args() throw();

  bool operator == (const App_init_run_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const App_init_run_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const App_init_run_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class App_init_run_pargs {
 public:


  virtual ~App_init_run_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _App_init_run_result__isset {
  _App_init_run_result__isset() : success(false) {}
  bool success :1;
} _App_init_run_result__isset;

class App_init_run_result {
 public:

  App_init_run_result(const App_init_run_result&);
  App_init_run_result& operator=(const App_init_run_result&);
  App_init_run_result() {
  }

  virtual ~App_init_run_result() throw();
  std::vector<std::string>  success;

  _App_init_run_result__isset __isset;

  void __set_success(const std::vector<std::string> & val);

  bool operator == (const App_init_run_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const App_init_run_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const App_init_run_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _App_init_run_presult__isset {
  _App_init_run_presult__isset() : success(false) {}
  bool success :1;
} _App_init_run_presult__isset;

class App_init_run_presult {
 public:


  virtual ~App_init_run_presult() throw();
  std::vector<std::string> * success;

  _App_init_run_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class AppClient : virtual public AppIf {
 public:
  AppClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  AppClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  int32_t ping();
  void send_ping();
  int32_t recv_ping();
  void init_run(std::vector<std::string> & _return);
  void send_init_run();
  void recv_init_run(std::vector<std::string> & _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class AppProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<AppIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (AppProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_ping(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_init_run(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  AppProcessor(boost::shared_ptr<AppIf> iface) :
    iface_(iface) {
    processMap_["ping"] = &AppProcessor::process_ping;
    processMap_["init_run"] = &AppProcessor::process_init_run;
  }

  virtual ~AppProcessor() {}
};

class AppProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  AppProcessorFactory(const ::boost::shared_ptr< AppIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< AppIfFactory > handlerFactory_;
};

class AppMultiface : virtual public AppIf {
 public:
  AppMultiface(std::vector<boost::shared_ptr<AppIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~AppMultiface() {}
 protected:
  std::vector<boost::shared_ptr<AppIf> > ifaces_;
  AppMultiface() {}
  void add(boost::shared_ptr<AppIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  int32_t ping() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ping();
    }
    return ifaces_[i]->ping();
  }

  void init_run(std::vector<std::string> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->init_run(_return);
    }
    ifaces_[i]->init_run(_return);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class AppConcurrentClient : virtual public AppIf {
 public:
  AppConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  AppConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  int32_t ping();
  int32_t send_ping();
  int32_t recv_ping(const int32_t seqid);
  void init_run(std::vector<std::string> & _return);
  int32_t send_init_run();
  void recv_init_run(std::vector<std::string> & _return, const int32_t seqid);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _WIN32
  #pragma warning( pop )
#endif

} // namespace

#endif
